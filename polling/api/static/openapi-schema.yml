openapi: 3.0.2
info:
  title: Polling API
  version: ''
  description: "API для проведения опросов пользователей"
paths:
  /api/auth-token/:
    post:
      operationId: Получение токена
      description: ''
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthToken'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
          description: ''
  /api/pollings/:
    get:
      operationId: Список всех опросов
      description: "Список всех опросов"
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Polling'
          description: ''
    post:
      operationId: Создание опроса
      security:
        - token: []
      description: 'Доступно только администратору'
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Polling'
      responses:
        '201':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Polling'
      '400':
        description: 'Ошибки валидации в стандартном формате DRF'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationError'
      '403':
        $ref: '#/components/responses/403'
      '404':
        $ref: '#/components/responses/NotFound'
    put:
      security:
        - token: []
      operationId: Изменение опроса
      description: 'Доступно только администратору'
      parameters:
        - name: id
          in: path
          required: true
          description: 'Уникальный идентификатор опроса'
          schema:
            type: int
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Polling'
      responses:
        '201':
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Polling'
        description: ''
    delete:
      operationId: Удаление опроса
      description: 'Доступно только администратору'
      security:
        - Token: [ ]
      parameters:
        - name: id
          in: path
          required: true
          description: "Уникальный идентификатор этого опроса"
          schema:
            type: int
      responses:
        '204':
          description: 'Вопрос успешно удален'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/pollings/{id}/:
    get:
      operationId: Отдельный опрос
      description: ""
      parameters:
      - name: id
        in: path
        required: true
        description: "Уникальный идентификатор опроса"
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Polling'
          description: ''
  /api/pollings/active/:
    get:
      operationId: Список активных опросов
      description: ""
      parameters: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Polling'
          description: ''
  /api/questions/{id}/:
    get:
      operationId: Отдельный вопрос
      description: "Получение отдельного вопроса."
      parameters:
      - name: id
        in: path
        required: true
        description: "Получение отдельного вопроса."
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
    post:
      security:
        - token: [ ]
      operationId: Создание вопроса
      description: 'Доступно только администратору'
      parameters: [ ]
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: 'Вопрос успешно создан'
        '400':
          description: 'Ошибки валидации в стандартном формате DRF'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/NotFound'
    put:
      operationId: Обновление вопроса
      security:
        - Token: [ ]
      description: 'Доступно только администратору'
      parameters:
      - name: id
        in: path
        required: true
        description: "Уникальный идентификатор этого вопроса."
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: 'Рецепт успешно обновлен'
        '400':
          $ref: '#/components/responses/ValidationError'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/NotFound'
    delete:
      operationId: Удаление вопроса

      description: 'Доступно только администратору'
      security:
        - Token: [ ]
      parameters:
      - name: id
        in: path
        required: true
        description: "Уникальный идентификатор этого вопроса"
        schema:
          type: string
      responses:
        '204':
          description: 'Вопрос успешно удален'
        '403':
          $ref: '#/components/responses/403'
        '404':
          $ref: '#/components/responses/NotFound'
  /api/answers/:
    post:
      operationId: Отправка ответов на опрос
      description: "Отправка ответов на опрос."
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Answer'
      responses:
        '201':
          content:
            application/json:
              schema: {}
          description: ''
  /api/answers/{user_id}/:
    get:
      operationId: Ответы пользователя на опрос
      description: "Статистика ответов пользователя по всем опросам."
      parameters:
      - name: user_id
        in: path
        required: true
        description: ''
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: ''
components:
  schemas:
    Polling:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        title:
          type: string
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043D\u0430\u0437\
            \u0432\u0430\u043D\u0438\u0435 \u043E\u043F\u0440\u043E\u0441\u0430"
          maxLength: 256
        start_date:
          type: string
          format: date
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0430\u0442\
            \u0443 \u043D\u0430\u0447\u0430\u043B\u0430 \u043E\u043F\u0440\u043E\u0441\
            \u0430"
        end_date:
          type: string
          format: date
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0434\u0430\u0442\
            \u0443 \u043E\u043A\u043E\u043D\u0447\u0430\u043D\u0438\u044F \u043E\u043F\
            \u0440\u043E\u0441\u0430"
        description:
          type: string
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043E\u043F\u0438\
            \u0441\u0430\u043D\u0438\u0435 \u0434\u043B\u044F \u043E\u043F\u0440\u043E\
            \u0441\u0430"
        questions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              text:
                type: string
                description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\
                  \u043A\u0441\u0442 \u0432\u043E\u043F\u0440\u043E\u0441\u0430"
              question_type:
                enum:
                - 3
                - 2
                - 1
                type: integer
                description: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\
                  \u0438\u043F \u0432\u043E\u043F\u0440\u043E\u0441\u0430"
                minimum: 0
                maximum: 2147483647
              polling:
                type: integer
                description: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\
                  \u043F\u0440\u043E\u0441, \u043A \u043A\u043E\u0442\u043E\u0440\u043E\
                  \u043C\u0443 \u043E\u0442\u043D\u043E\u0441\u0438\u0442\u0441\u044F\
                  \ \u0434\u0430\u043D\u043D\u044B\u0439 \u0432\u043E\u043F\u0440\u043E\
                  \u0441"
              options:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      readOnly: true
                    text:
                      type: string
                      description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\
                        \u0435\u043A\u0441\u0442 \u0432\u0430\u0440\u0438\u0430\u043D\
                        \u0442\u0430 \u043E\u0442\u0432\u0435\u0442\u0430"
                  required:
                  - text
            required:
            - text
            - question_type
            - polling
            - options
          readOnly: true
      required:
      - title
      - start_date
      - end_date
      - description
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        text:
          type: string
          description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\u043A\
            \u0441\u0442 \u0432\u043E\u043F\u0440\u043E\u0441\u0430"
        question_type:
          enum:
          - 3
          - 2
          - 1
          type: integer
          description: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u0442\u0438\
            \u043F \u0432\u043E\u043F\u0440\u043E\u0441\u0430"
          minimum: 0
          maximum: 2147483647
        polling:
          type: integer
          description: "\u0412\u044B\u0431\u0435\u0440\u0438\u0442\u0435 \u043E\u043F\
            \u0440\u043E\u0441, \u043A \u043A\u043E\u0442\u043E\u0440\u043E\u043C\u0443\
            \ \u043E\u0442\u043D\u043E\u0441\u0438\u0442\u0441\u044F \u0434\u0430\u043D\
            \u043D\u044B\u0439 \u0432\u043E\u043F\u0440\u043E\u0441"
        options:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                readOnly: true
              text:
                type: string
                description: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0442\u0435\
                  \u043A\u0441\u0442 \u0432\u0430\u0440\u0438\u0430\u043D\u0442\u0430\
                  \ \u043E\u0442\u0432\u0435\u0442\u0430"
            required:
            - text
      required:
      - text
      - question_type
      - polling
      - options
    AuthToken:
      type: object
      properties:
        username:
          type: string
          writeOnly: true
        password:
          type: string
          writeOnly: true
        token:
          type: string
          readOnly: true
      required:
      - username
      - password
    ValidationError:
      description: Стандартные ошибки валидации DRF
      type: object
      properties:
        field_name:
          description: 'Название поля, в котором произошли ошибки. Таких полей может быть несколько'
          example: [ 'Обязательное поле.' ]
          type: array
          items:
            type: string
    AuthenticationError:
      description: Пользователь не авторизован
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Учетные данные не были предоставлены."
          type: string
    PermissionDenied:
      description: Недостаточно прав
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "У вас недостаточно прав для выполнения данного действия."
          type: string
    NotFound:
      description: Объект не найден
      type: object
      properties:
        detail:
          description: 'Описание ошибки'
          example: "Страница не найдена."
          type: string
    Answer:
      type: object
      properties:
        polling:
          type: integer
          description: "id опроса"
        respondent_id:
          type: integer
          description: "id респондента"
        answers:
          desctiption: "Ответы на вопрос"
          type: array
          items:
            type: object
            properties:
              question:
                type: integer
                description: "id вопроса"
              answer:
                type: string, integer, array
                description: "Ответ на вопрос"
            required:
              - question
              - answer
      required:
        - polling
        - respondent_id
        - answers


  responses:
    ValidationError:
      description: 'Ошибки валидации в стандартном формате DRF'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ValidationError'

    AuthenticationError:
      description: Пользователь не авторизован
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AuthenticationError'

    PermissionDenied:
      description: Недостаточно прав
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/PermissionDenied'

    NotFound:
      description: Объект не найден
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/NotFound'


    403:
      description: 'Пользователь не авторизован / Недостаточно прав'
      content:
        application/json:
          schema:
            oneOf:
              - $ref: '#/components/schemas/AuthenticationError'
              - $ref: '#/components/schemas/PermissionDenied'
  securitySchemes:
    Token:
      description: 'Авторизация по токену. <br>
        Все запросы от имени пользователя должны выполняться с заголовком "Authorization: Token TOKENVALUE"'
      type: http
      scheme: token